{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mattreiso/br-python-challenges/blob/master/Desafio_12.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AYHY2YXQf6J2"
      },
      "source": [
        "### Desafio 12\n",
        "\n",
        "Escreva uma função em Python para verificar a validade de uma senha.\n",
        "\n",
        "A senha deve ter:\n",
        "\n",
        "* Pelo menos 1 letra entre [a-z] e 1 letra entre [A-Z].\n",
        "* Pelo menos 1 número entre [0-9].\n",
        "* Pelo menos 1 caractere de [$ # @].\n",
        "* Comprimento mínimo de 6 caracteres.\n",
        "* Comprimento máximo de 16 caracteres.\n",
        "\n",
        "Entradas: \"12345678\", \"J3sus0\", \"#Te5t300\", \"J*90j12374\", \"Michheeul\", \"Monk3y6\"\n",
        "\n",
        "A saída deve ser a senha e um texto indicando se a senha é válida ou inválida:\n",
        "\n",
        "```\n",
        "\"1234\" - Senha inválida\n",
        "\"Qw#1234\" - Senha válida\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re"
      ],
      "metadata": {
        "id": "Oz4edIl12zO5"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "UGgtGYGGf6J3"
      },
      "outputs": [],
      "source": [
        "#usando expressoes regulares fica muito mais rapido\n",
        "def senha (entrada):\n",
        "  flag = 0\n",
        "  while True:\n",
        "    if not re.search('[a-z]', entrada):\n",
        "      flag = -1\n",
        "      break\n",
        "    elif not re.search('[A-Z]', entrada):\n",
        "      flag = -1\n",
        "      break\n",
        "    elif not re.search('[0-9]', entrada):\n",
        "      flag = -1\n",
        "      break\n",
        "    elif not re.search('[$#@]', entrada):\n",
        "      flag = -1\n",
        "      break\n",
        "    elif len(entrada)<6:\n",
        "      flag = -1\n",
        "      break\n",
        "    elif len(entrada)>16:\n",
        "      flag = -1\n",
        "      break\n",
        "    else:\n",
        "      flag = 0\n",
        "      print(f'{entrada} Senha Válida')\n",
        "      break\n",
        "\n",
        "  if flag == -1:\n",
        "    print(f'{entrada} Senha Inválida')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "senha('Te5t300')\n",
        "senha('#Te5t300')"
      ],
      "metadata": {
        "id": "vj-iGoWY9RUP",
        "outputId": "6e4f421a-733b-46e9-d820-009168242be5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Te5t300 Senha Inválida\n",
            "#Te5t300 Senha Válida\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "anaconda-cloud": {},
    "colab": {
      "name": "Desafio 12.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
